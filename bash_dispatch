#!/bin/bash

# Launch different bash configuration for Linux vs OSX, interactive vs batch
#
# More info at https://github.com/josephwecker/bashrc_dispatch
#
# License: Public Domain.
# Author:  Joseph Wecker, 2012

# Configuration
# -------------
#
# BRCD_EXPORT_FUNCTIONS: export BRCD_SHELL_PLATFORM and shell_is_* functions for use
#                   in other scripts.

BRCD_EXPORT_FUNCTIONS=false
BRCD_DEBUG=

# Code
# ----

# Avoid recursive invocation
[ -n "$BRCD_BASHRC_DISPATCH_PID" ] && [ $$ -eq "$BRCD_BASHRC_DISPATCH_PID" ] && return
BRCD_BASHRC_DISPATCH_PID=$$


# Setup the main shell variables and functions
if [ -z "$BRCD_SHELL_PLATFORM" ]; then
    BRCD_SHELL_PLATFORM='OTHER'
    case "$OSTYPE" in
      *'linux'*   ) BRCD_SHELL_PLATFORM='LINUX' ;;
      *'darwin'*  ) BRCD_SHELL_PLATFORM='OSX' ;;
      *'freebsd'* ) BRCD_SHELL_PLATFORM='BSD' ;;
    esac
fi

if ! type -p shell_is_login ; then
  shell_is_linux       () { [[ "$OSTYPE" == *'linux'* ]] ; }
  shell_is_osx         () { [[ "$OSTYPE" == *'darwin'* ]] ; }
  shell_is_login       () { shopt -q login_shell ; }
  shell_is_interactive () { test -n "$PS1" ; }
  shell_is_script      () { ! shell_is_interactive ; }
fi


# Make $BASH_ENV the same in interactive and non-interactive scripts
# BASH_SOURCE is the path to this bash_dispatch script as it was called.
[ -z "$BASH_ENV" ] && export BASH_ENV="$BASH_SOURCE"


# Make these available to the potentially convoluted bashrc_* startup scripts

if $BRCD_EXPORT_FUNCTIONS ; then
    export BRCD_SHELL_PLATFORM
    export -f shell_is_linux
    export -f shell_is_osx
    export -f shell_is_login
    export -f shell_is_interactive
    export -f shell_is_script
fi

# Now dispatch special files
BRCD_THIS_DIR=$(dirname "$(readlink -f ${BASH_SOURCE[0]})")
BRCD_PREFIX="${BRCD_THIS_DIR}"
[ -n "$BRCD_DEBUG" ] && echo BRCD_PREFIX = "$BRCD_PREFIX"

# Define a "pre-hostname" : eg. "kraken" for "kraken.example.com"
BRCD_PRE_HOSTNAME=$(hostname | cut -d "." -f 1)
[ -n "$BRCD_DEBUG" ] && echo BRCD_PRE_HOSTNAME = "$BRCD_PRE_HOSTNAME"

# bashrc_once needs guards to make sure it runs only once.
# Set the guard BRCD_RANONCE before sourcing the bashrc_once file
# so that any recursive invocations of bash_dispatch will not try
# to run bashrc_once again
# Allow for a system-specific .bashrc_interactive file specified locally
#   eg. $HOME/.bashrc_interactive_local
# Allow for a system-specific bashrc_interactive_${HOST} in tentacle/
#   eg. if ~/tentacle/bashrc_interactive_kraken exists,
#   source it on kraken.example.com
# However, don't source it again if it was linked from *_local, above
# Guard against sourcing the same file again by checking device and inode
if [ -f "${BRCD_PREFIX}/bashrc_all" ]; then
  [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_all"
  . "${BRCD_PREFIX}/bashrc_all"

  if [ -f ${HOME}/.bashrc_all_local ]; then
    [ -n "${BRCD_DEBUG}" ] && echo " --> source ${HOME}/bashrc_all_local"
    . ${HOME}/.bashrc_all_local
  fi

  if [ -f "${BRCD_PREFIX}/bashrc_all_${BRCD_PRE_HOSTNAME}" ]; then
    if [ ! "${HOME}/.bashrc_all_local" \
	 -ef "${BRCD_PREFIX}/bashrc_all_${BRCD_PRE_HOSTNAME}" ]; then
      . "${BRCD_PREFIX}/bashrc_all_${BRCD_PRE_HOSTNAME}"
      [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_all_${BRCD_PRE_HOSTNAME}"
    fi
  fi
fi

if [ -f "${BRCD_PREFIX}/bashrc_script" ] && shell_is_script ; then
  [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_script"
  . "${BRCD_PREFIX}/bashrc_script"

  if [ -f ${HOME}/.bashrc_script_local ]; then
    [ -n "${BRCD_DEBUG}" ] && echo " --> source ${HOME}/bashrc_script_local"
    . ${HOME}/.bashrc_script_local
  fi

  if [ -f "${BRCD_PREFIX}/bashrc_script_${BRCD_PRE_HOSTNAME}" ]; then
    if [ ! "${HOME}/.bashrc_script_local" \
	 -ef "${BRCD_PREFIX}/bashrc_script_${BRCD_PRE_HOSTNAME}" ]; then
      [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_script_${BRCD_PRE_HOSTNAME}"
      . "${BRCD_PREFIX}/bashrc_script_${BRCD_PRE_HOSTNAME}"
    fi
  fi
fi

if [ -f "${BRCD_PREFIX}/bashrc_interactive" ] && shell_is_interactive ; then
  [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_interactive"
  . "${BRCD_PREFIX}/bashrc_interactive"

  if [ -f ${HOME}/.bashrc_interactive_local ]; then
    [ -n "${BRCD_DEBUG}" ] && echo " --> source ${HOME}/bashrc_interactive_local"
    . ${HOME}/.bashrc_interactive_local
  fi

  if [ -f "${BRCD_PREFIX}/bashrc_interactive_${BRCD_PRE_HOSTNAME}" ]; then
    if [ ! "${HOME}/.bashrc_interactive_local" \
	 -ef "${BRCD_PREFIX}/bashrc_interactive_${BRCD_PRE_HOSTNAME}" ]; then
      . "${BRCD_PREFIX}/bashrc_interactive_${BRCD_PRE_HOSTNAME}"
      [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_interactive_${BRCD_PRE_HOSTNAME}"
    fi
  fi
fi

if [ -f "${BRCD_PREFIX}/bashrc_login" ] && shell_is_login ; then
  [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_login"
  . "${BRCD_PREFIX}/bashrc_login"

  if [ -f ${HOME}/.bashrc_login_local ]; then
    [ -n "${BRCD_DEBUG}" ] && echo " --> source ${HOME}/bashrc_login_local"
    . ${HOME}/.bashrc_login_local
  fi

  if [ -f "${BRCD_PREFIX}/bashrc_login_${BRCD_PRE_HOSTNAME}" ]; then
    if [ ! "${HOME}/.bashrc_login_local" \
	 -ef "${BRCD_PREFIX}/bashrc_login_${BRCD_PRE_HOSTNAME}" ]; then
      [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_login_${BRCD_PRE_HOSTNAME}"
      . "${BRCD_PREFIX}/bashrc_login_${BRCD_PRE_HOSTNAME}"
    fi
  fi
fi

# This needs an additional guard to avoid recursive or repeated sourcing
if [ -f "${BRCD_PREFIX}/bashrc_once"  ] && [ -z "$BRCD_RANONCE" ]; then
  [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_once"
  export BRCD_RANONCE=true 
  . "${BRCD_PREFIX}/bashrc_once"

  if [ -f ${HOME}/.bashrc_once_local ]; then
    [ -n "${BRCD_DEBUG}" ] && echo " --> source ${HOME}/bashrc_once_local"
    . ${HOME}/.bashrc_once_local
  fi

  if [ -f "${BRCD_PREFIX}/bashrc_once_${BRCD_PRE_HOSTNAME}" ]; then
    if [ ! "${HOME}/.bashrc_once_local" \
	 -ef "${BRCD_PREFIX}/bashrc_once_${BRCD_PRE_HOSTNAME}" ]; then
      [ -n "${BRCD_DEBUG}" ] && echo " --> source ${BRCD_PREFIX}/bashrc_once_${BRCD_PRE_HOSTNAME}"
      . "${BRCD_PREFIX}/bashrc_once_${BRCD_PRE_HOSTNAME}"
    fi
  fi
fi

# Unset variables if necessary to avoid env polution
if ! $BRCD_EXPORT_FUNCTIONS ; then
    unset BRCD_SHELL_PLATFORM
    unset -f shell_is_linux
    unset -f shell_is_osx
    unset -f shell_is_login
    unset -f shell_is_interactive
    unset -f shell_is_script
fi


# Unset local variables
unset fn_cmd
unset BRCD_EXPORT_FUNCTIONS
unset BRCD_BASHRC_DISPATCH_PID
unset BRCD_PREFIX
unset BRCD_THIS_DIR
unset BRCD_PRE_HOSTNAME
unset BRCD_DEBUG
